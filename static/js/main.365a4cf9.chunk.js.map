{"version":3,"sources":["components/Input/Input.tsx","state/counterReducer.ts","state/settingsReducer.ts","components/Settings/SettingsBlock.tsx","components/Counter/CounterBlock.tsx","components/Button/Button.tsx","App.tsx","state/store.ts","reportWebVitals.ts","index.tsx","components/Counter/CounterBlock.module.css","components/Button/Button.module.css","components/Settings/SettingsBlock.module.css"],"names":["Input","props","labelText","className","type","name","inputName","value","onChange","callback","initialState","startValue","maxValue","counterValue","error","settingsMode","setError","payload","setSettingsMode","SettingsBlock","dispatch","useDispatch","useSelector","state","counter","setClassNameForInput","settings","s","input","changeValue","e","currentValue","Number","currentTarget","setStartValueAC","setMaxValueAC","CounterBlock","setClass","message","setClassForCounterValue","Button","title","disabled","setDisabletForButton","button","onClick","App","preloadedState","useEffect","setCounterValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","persistedTodosString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.365a4cf9.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\r\n\r\ntype InputType = {\r\n    labelText: string\r\n    inputName: string\r\n    className: string\r\n    value: number\r\n    callback: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Input = (props: InputType) => {\r\n\r\n    return (\r\n        <div>\r\n\r\n            {props.labelText}\r\n            <input className={props.className}\r\n                   type={\"number\"}\r\n                   name={props.inputName}\r\n                   value={props.value}\r\n                   onChange={props.callback}/>\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n\r\n    )\r\n}","const initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    counterValue: 0,\r\n}\r\nexport type CounterStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof increaseValueAC>\r\n    | ReturnType<typeof setCounterValueAC>\r\n    | ReturnType<typeof setStartValueAC>\r\n    | ReturnType<typeof setMaxValueAC>\r\n\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n    switch (action.type) {\r\n        case \"INCREASE-VALUE\":\r\n            return {...state, counterValue: state.counterValue + 1}\r\n\r\n        case \"SET-COUNTER-VALUE\":\r\n        case \"SET-START-VALUE\":\r\n        case \"SET-MAX-VALUE\":\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const increaseValueAC = () => {\r\n    return {\r\n        type: 'INCREASE-VALUE'\r\n    } as const\r\n}\r\nexport const setCounterValueAC = (counterValue: number) => {\r\n    return {\r\n        type: 'SET-COUNTER-VALUE',\r\n        payload: {counterValue},\r\n    } as const\r\n}\r\nexport const setStartValueAC = (startValue: number) => {\r\n    return {\r\n        type: 'SET-START-VALUE',\r\n        payload: {startValue},\r\n    } as const\r\n}\r\nexport const setMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: 'SET-MAX-VALUE',\r\n        payload: {maxValue},\r\n    } as const\r\n}\r\n\r\n","\r\nconst initialState = {\r\n    error: false,\r\n    settingsMode: true,\r\n}\r\nexport type SettingsStateType = typeof initialState\r\n\r\ntype ActionsType = ReturnType<typeof setError> | ReturnType<typeof setSettingsMode>\r\n\r\n\r\n\r\nexport const settingsReducer = (state: SettingsStateType = initialState, action: ActionsType): SettingsStateType => {\r\n    switch (action.type) {\r\n        case \"SET-ERROR\":\r\n        case \"SET-SETTINGS-MODE\":\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setError = (error: boolean) => {\r\n    return {\r\n        type: 'SET-ERROR',\r\n        payload: {error}\r\n    } as const\r\n}\r\nexport const setSettingsMode = (settingsMode: boolean) => {\r\n    return {\r\n        type: 'SET-SETTINGS-MODE',\r\n        payload: {settingsMode}\r\n    } as const\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './SettingsBlock.module.css'\r\nimport {Input} from \"../Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { AppRootStateType } from '../../state/store';\r\nimport {CounterStateType, setMaxValueAC, setStartValueAC} from '../../state/counterReducer';\r\nimport {setSettingsMode} from \"../../state/settingsReducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const SettingsBlock = () => {\r\n\r\nconst dispatch = useDispatch<Dispatch>()\r\n\r\n    const {\r\n        startValue,\r\n        maxValue,\r\n    } = useSelector<AppRootStateType, CounterStateType>(state => state.counter)\r\n    const error = useSelector<AppRootStateType,boolean>(state => state.settings.error)\r\n\r\n    let setClassNameForInput = error ? s.error : s.input;\r\n\r\n    //изменяет значение в инпутах\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let currentValue = Number(e.currentTarget.value)\r\n        dispatch(setSettingsMode(true))\r\n\r\n        switch (e.currentTarget.name) {\r\n            case 'startValue':\r\n                dispatch(setStartValueAC(currentValue))\r\n                break;\r\n            case 'maxValue':\r\n                dispatch(setMaxValueAC(currentValue))\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n            <div className='settings'>\r\n                <Input labelText={'start value:'}\r\n                       className={setClassNameForInput}\r\n                       inputName={'startValue'}\r\n                       value={startValue}\r\n                       callback={changeValue}/>\r\n\r\n                <Input labelText={'max value:'}\r\n                       className={setClassNameForInput}\r\n                       inputName={'maxValue'}\r\n                       value={maxValue}\r\n                       callback={changeValue}/>\r\n            </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './CounterBlock.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {SettingsStateType} from \"../../state/settingsReducer\";\r\nimport {CounterStateType} from \"../../state/counterReducer\";\r\n\r\n\r\nexport const CounterBlock = () => {\r\n\r\n    const {\r\n        counterValue,\r\n        maxValue,\r\n    } = useSelector<AppRootStateType, CounterStateType>(state => state.counter)\r\n\r\n    const {\r\n        error,\r\n        settingsMode,\r\n    } = useSelector<AppRootStateType, SettingsStateType>(state => state.settings)\r\n\r\n    const setClass = error ? `${s.message} ${s.error}` : s.message\r\n    const setClassForCounterValue = counterValue >= maxValue ? `${s.counterValue} ${s.error}` : s.counterValue\r\n\r\n\r\n    return (\r\n\r\n            <div className={'counter'}>\r\n                {settingsMode &&\r\n                <div className={setClass}>\r\n                    {error\r\n                        ? `Enter correct values`\r\n                        : `Enter values and press 'set'`}\r\n                </div>}\r\n\r\n\r\n                <div className={setClassForCounterValue}>\r\n                    {!error && counterValue}\r\n                </div>\r\n\r\n            </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {SettingsStateType} from \"../../state/settingsReducer\";\r\nimport {CounterStateType} from \"../../state/counterReducer\";\r\n\r\n\r\ntype ButtonPropsType = {\r\n    title: string\r\n    callback: () => void\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({title, callback}) => {\r\n\r\n    const {\r\n        error,\r\n        settingsMode,\r\n    } = useSelector<AppRootStateType, SettingsStateType>(state => state.settings)\r\n\r\n    const {\r\n        startValue,\r\n        maxValue,\r\n        counterValue,\r\n    } = useSelector<AppRootStateType, CounterStateType>(state => state.counter)\r\n\r\n    const setDisabletForButton = (title: string) => {\r\n        let isDisabled = false;\r\n        switch (title) {\r\n            case 'set' :\r\n                return !settingsMode || error;\r\n            case 'inc' :\r\n                return counterValue === maxValue || error || settingsMode;\r\n            case 'reset' :\r\n                return maxValue === startValue || error || settingsMode;\r\n\r\n            default:\r\n                return isDisabled\r\n        }\r\n    }\r\n    let disabled = setDisabletForButton(title)\r\n\r\n\r\n    const setClass = disabled ? `${s.button} ${s.disabled}` : s.button\r\n\r\n    return <button className={setClass} onClick={callback} disabled={disabled}>\r\n        {title}\r\n    </button>\r\n\r\n}","import React, {useEffect} from 'react';\nimport {SettingsBlock} from \"./components/Settings/SettingsBlock\";\nimport {CounterBlock} from \"./components/Counter/CounterBlock\";\nimport {Button} from \"./components/Button/Button\";\nimport './App.css';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {increaseValueAC, setCounterValueAC} from \"./state/counterReducer\";\nimport {setError, setSettingsMode} from \"./state/settingsReducer\";\nimport {Dispatch} from \"redux\";\n\n\nfunction App() {\n\n    let dispatch = useDispatch<Dispatch>()\n    let startValue = useSelector<AppRootStateType, number>(state => state.counter.startValue)\n    let maxValue = useSelector<AppRootStateType, number>(state => state.counter.maxValue)\n\n\n    useEffect(() => {\n\n        if (startValue >= maxValue || startValue < 0) {\n            dispatch(setError(true))\n        } else {\n            dispatch(setError(false))\n        }\n    }, [startValue, maxValue])\n\n//увеличивает значение в счетчике\n    const increaseValue = () => {\n        dispatch(increaseValueAC())\n    }\n\n//устанавливает значение счетчика\n    const setCounterValue = () => {\n            dispatch(setCounterValueAC(startValue))\n            dispatch(setSettingsMode(false))\n    }\n\n    return (\n        <div className=\"cover\">\n\n            <div className={'settingsBlock'}>\n                <SettingsBlock/>\n                <Button title='set' callback={setCounterValue}/>\n            </div>\n            <div className={'counterBlock'}>\n                <CounterBlock/>\n                <Button title='inc' callback={increaseValue}/>\n                <Button title='reset' callback={setCounterValue}/>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"./counterReducer\";\r\nimport {settingsReducer} from \"./settingsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    settings: settingsReducer,\r\n})\r\n\r\nlet preloadedState;\r\nconst persistedTodosString = localStorage.getItem('state')\r\nif (persistedTodosString) {\r\n    preloadedState = JSON.parse(persistedTodosString)\r\n}\r\n\r\nexport const store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('state', JSON.stringify(store.getState()))\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}><App/></Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterValue\":\"CounterBlock_counterValue__1WXFd\",\"error\":\"CounterBlock_error__1diwO\",\"message\":\"CounterBlock_message__1mCop\",\"blink1\":\"CounterBlock_blink1__3nzab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3sFsz\",\"disabled\":\"Button_disabled__F4o3a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"SettingsBlock_button__21Ggi\",\"error\":\"SettingsBlock_error__3ieVv\",\"input\":\"SettingsBlock_input__lWAHZ\"};"],"sourceRoot":""}